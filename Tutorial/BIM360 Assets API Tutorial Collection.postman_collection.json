{
	"info": {
		"_postman_id": "eb0f09c3-f248-4ff8-a643-f88a3dd9b418",
		"name": "BIM360 Assets API Tutorial Collection",
		"description": "The collection and the environment show you how to create a new category, create a new asset with status, create custom attributes, associate it with assets, and update the attribute value.\n\n1. Retrieve BIM 360 Account and Project ID: It contains a set of Postman scripts demonstrating how to obtain your BIM 360 Account and Project ID. If you already have these, you can skip this tutorial.\n\n2. Setup BIM 360 Assets Settings: It contains a set of Postman scripts demonstrating how to set up a new BIM 360 project's Asset settings.\n\n3. Create BIM 360 Assets Data:  It contains a set of Postman scripts demonstrating how to create Asset data, work with Issue API to crate an issue, and assign the issue to an asset.\n\n4. Retrieve BIM 360 Assets Data: It contains a set of Postman scripts demonstrating how to fetch your complete set of BIM 360 Asset data and metadata. This collection can be for the entirety of your Asset data or filtered to a subset of Asset data.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Retrieve BIM 360 Account and Project ID",
			"item": [
				{
					"name": "Step 1: Find the Hub ID for the BIM 360 Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"// find the specified project and setup the environment variable \"hub_id\"",
									"var hub_name =  pm.environment.get(\"hub_name\");",
									"var responseBody = JSON.parse(responseBody);",
									"for ( var index in responseBody.data) {",
									"    if(responseBody.data[index].id.indexOf(\"b.\") != -1 && responseBody.data[index].attributes.name == hub_name){",
									"        postman.setEnvironmentVariable(\"hub_id\", responseBody.data[index].id);",
									"        postman.setEnvironmentVariable(\"account_id\", responseBody.data[index].id.split(\"b.\").join(\"\"));",
									"        break;",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"hub_name\", \"change to your hub/account name\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/project/v1/hubs",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"project",
								"v1",
								"hubs"
							]
						},
						"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
					},
					"response": []
				},
				{
					"name": "Step 2: Find the Project ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"",
									"// find the specified project and setup the environment variable \"project_id\"",
									"var project_name =  pm.environment.get(\"project_name\");",
									"var responseBody = JSON.parse(responseBody);",
									"for ( var index in responseBody.data) {",
									"    if(responseBody.data[index].attributes.name == project_name){",
									"        postman.setEnvironmentVariable(\"project_id\", responseBody.data[index].id);",
									"        postman.setEnvironmentVariable(\"assets_project_id\", responseBody.data[index].id.split(\"b.\").join(\"\"));",
									"        break;",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"project_name\", \"change to your project name\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_domain}}/project/v1/hubs/{{hub_id}}/projects",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"project",
								"v1",
								"hubs",
								"{{hub_id}}",
								"projects"
							]
						},
						"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
					},
					"response": []
				}
			],
			"description": "This tutorial demonstrates how to obtain your BIM 360 Account and Project ID. If you already have these, you can skip this tutorial.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Setup BIM 360 Assets Settings",
			"item": [
				{
					"name": "Step 1: Create Categories",
					"item": [
						{
							"name": "Step 1.1: Find root assets categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"",
											"    if(responseBody.results.length > 0) {",
											"        var rootCategory = responseBody.results.find(cate => cate.name == \"ROOT\" && cate.createdBy == \"assets-service\");",
											"        pm.environment.set(\"asset_category_parent_id\", rootCategory.id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/categories",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"bim360",
										"assets",
										"v1",
										"projects",
										":projectId",
										"categories"
									],
									"query": [
										{
											"key": "cursorState",
											"value": "",
											"description": "Opaque cursor token for pagination. Should be left blank for the initial call. Subsequent calls should use the cursorState found in the previous response. To reinitiate pagination, omit cursorState.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "100",
											"description": "The maximum number of objects that can be returned. A query might return fewer than the value of limit due to filtering or other reasons.",
											"disabled": true
										},
										{
											"key": "filter[isActive]",
											"value": "true",
											"description": "Filter to entities that are active or inactive",
											"disabled": true
										},
										{
											"key": "filter[parentId]",
											"value": "",
											"description": "Filter categories to direct children of the given parentId (a category ID)",
											"disabled": true
										},
										{
											"key": "filter[maxDepth]",
											"value": "",
											"description": "Filter categories to a maximum depth. Depth 0 means to only return the ROOT category.",
											"disabled": true
										},
										{
											"key": "filter[updatedAt]",
											"value": null,
											"description": "Retrieves items that were updated at the specified date and time, in the following format: YYYY-MM-DDThh:mm:ss.SSSZ, or a date and time range in the following format: YYYY-MM-DDThh:mm:ss.SSSZ..YYYY-MM-DDThh:mm:ss.SSSZ. Range queries can be closed or open in either direction (i.e. YYYY-MM-DDThh:mm:ss.SSSZ.. or ..YYYY-MM-DDThh:mm:ss.SSSZ).",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{assets_project_id}}",
											"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”"
										}
									]
								},
								"description": "Get all Categories paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-categories-GET/"
							},
							"response": []
						},
						{
							"name": "Step 1.2: Create a new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"    pm.environment.set(\"asset_category_id\", responseBody.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(format = 'xxxxxxxxxx') {",
											"    var d = new Date().getTime()",
											"",
											"    var guid = format.replace(",
											"      /[xy]/g,",
											"      function (c) {",
											"        var r = (d + Math.random() * 16) % 16 | 0",
											"        d = Math.floor(d / 16)",
											"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
											"      })",
											"",
											"    return guid",
											"  }",
											"",
											"pm.environment.set(\"asset_category_name\", \"Electrical-\" + guid());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{asset_category_name}}\",\n    \"description\": \"Electrical Outlets category for Assets tutorial\",\n    \"parentId\": \"{{asset_category_parent_id}}\"\n}"
								},
								"url": {
									"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/categories",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"bim360",
										"assets",
										"v1",
										"projects",
										":projectId",
										"categories"
									],
									"variable": [
										{
											"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”",
											"enabled": true,
											"key": "projectId",
											"type": "text",
											"value": "{{assets_project_id}}"
										}
									]
								},
								"description": "Create a new Category.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-categories-POST/"
							},
							"response": []
						}
					]
				},
				{
					"name": "Step 2: Create Status Sets and Statuses",
					"item": [
						{
							"name": "Step 2.1: Create a new Status Set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"    pm.environment.set(\"asset_status_step_set_id\", responseBody.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(format = 'xxxxxxxxxx') {",
											"    var d = new Date().getTime()",
											"",
											"    var guid = format.replace(",
											"      /[xy]/g,",
											"      function (c) {",
											"        var r = (d + Math.random() * 16) % 16 | 0",
											"        d = Math.floor(d / 16)",
											"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
											"      })",
											"",
											"    return guid",
											"  }",
											"",
											"pm.environment.set(\"asset_status_set_name\", \"Electrical Status Set-\" + guid());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{asset_status_set_name}}\",\n    \"description\": \"For electrical assets\",\n    \"values\": [\n        {\n            \"label\": \"Ordered\",\n            \"description\": \"Electrical asset has been ordered\",\n            \"color\": \"green\"\n        },\n        {\n            \"label\": \"Delivered\",\n            \"description\": \"Electrical asset has been delivered\",\n            \"color\": \"blue\"\n        },\n        {\n            \"label\": \"Installed\",\n            \"description\": \"Electrical asset has been installed\",\n            \"color\": \"red\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/status-step-sets",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"bim360",
										"assets",
										"v1",
										"projects",
										":projectId",
										"status-step-sets"
									],
									"variable": [
										{
											"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”",
											"enabled": true,
											"key": "projectId",
											"type": "text",
											"value": "{{assets_project_id}}"
										}
									]
								},
								"description": "Create a new Status Set.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-status-step-sets-POST/"
							},
							"response": []
						},
						{
							"name": "Step 2.2: Create a new Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"    pm.environment.set(\"asset_status_id\", responseBody.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"label\": \"Expired\",\n    \"description\": \"Electrical asset is expired that needs a replacment\",\n    \"color\": \"gray\",\n    \"statusStepSetId\": \"{{asset_status_step_set_id}}\"\n}"
								},
								"url": {
									"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/asset-statuses",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"bim360",
										"assets",
										"v1",
										"projects",
										":projectId",
										"asset-statuses"
									],
									"variable": [
										{
											"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”",
											"enabled": true,
											"key": "projectId",
											"type": "text",
											"value": "{{assets_project_id}}"
										}
									]
								},
								"description": "Create an Asset Status.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-asset-statuses-POST/"
							},
							"response": []
						}
					]
				},
				{
					"name": "Step 6: Assign Checklists to Categories",
					"item": [
						{
							"name": "Step 6.1: Get the project and setup checklists container id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"// setup the environment variable \"checklists_container_id\"",
											"var responseBody = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"checklists_container_id\", responseBody.data.relationships.checklists.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}/project/v1/hubs/{{hub_id}}/projects/{{project_id}}",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs",
										"{{hub_id}}",
										"projects",
										"{{project_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 6.2: Find checklist templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/vnd.api+json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.api+json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.data && responseBody.data.length > 0).to.eql(true);",
											"",
											"    postman.setEnvironmentVariable(\"checklist_template_id\", responseBody.data[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"url": {
									"raw": "{{base_domain}}/bim360/checklists/v1/containers/:containerId/templates",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"bim360",
										"checklists",
										"v1",
										"containers",
										":containerId",
										"templates"
									],
									"variable": [
										{
											"description": "Each project is assigned a container that stores all the checklists for the project. To find the ID, see the Retrieve a Container ID tutorial.",
											"key": "containerId",
											"value": "{{checklists_container_id}}"
										}
									]
								},
								"description": "Retrieves information about all the BIM 360 Field Management templates in a project, including details about the items, sections, and attachments in the template. To get information about a single template, see GET templates/:id.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/checklists-templates-GET/"
							},
							"response": []
						},
						{
							"name": "Step 6.3: Associate checklist template with a category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody && responseBody.length > 0).to.eql(true);",
											"    pm.expect(responseBody[0]).to.have.property(\"id\");",
											"",
											"    pm.environment.set(\"asset_category_checklist_template_relationship_id\", responseBody[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"entities\": [\n        {\n            \"id\": \"{{checklist_template_id}}\",\n            \"type\": \"checklisttemplate\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/categories/:categoryId/relationships",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"bim360",
										"assets",
										"v1",
										"projects",
										":projectId",
										"categories",
										":categoryId",
										"relationships"
									],
									"variable": [
										{
											"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”",
											"enabled": true,
											"key": "projectId",
											"type": "text",
											"value": "{{assets_project_id}}"
										},
										{
											"key": "categoryId",
											"value": "{{asset_category_id}}",
											"description": "Category ID"
										}
									]
								},
								"description": "Add relationships between a Category and target entities.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-categories-category-id-relationships-POST/"
							},
							"response": []
						}
					]
				},
				{
					"name": "Step 3: Assign Status Sets to Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty and task is succeed\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"categoryId\")",
									"                                .that.to.eql(pm.environment.get(\"asset_category_id\"));",
									"    pm.expect(responseBody).to.have.property(\"statusStepSetId\")",
									"                                .that.to.eql(pm.environment.get(\"asset_status_step_set_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/categories/:categoryId/status-step-set/:statusStepSetId\n",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v1",
								"projects",
								":projectId",
								"categories",
								":categoryId",
								"status-step-set",
								":statusStepSetId\n"
							],
							"variable": [
								{
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”",
									"enabled": true,
									"key": "projectId",
									"type": "text",
									"value": "{{assets_project_id}}"
								},
								{
									"description": "Category ID",
									"enabled": true,
									"key": "categoryId",
									"type": "text",
									"value": "{{asset_category_id}}"
								},
								{
									"key": "statusStepSetId\n",
									"value": "{{asset_status_step_set_id}}",
									"description": "The Status Set ID"
								}
							]
						},
						"description": "Assign a Status Set to a Category.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-categories-category-id-status-step-set-status-step-set-id-PUT/"
					},
					"response": []
				},
				{
					"name": "Step 4: Create Custom Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property(\"id\");",
									"    pm.expect(responseBody).to.have.property(\"name\");",
									"",
									"    pm.environment.set(\"custom_attribute_id\", responseBody.id);",
									"    pm.environment.set(\"custom_attribute_name\", responseBody.name);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function guid(format = 'xxxxxxxxxx') {",
									"    var d = new Date().getTime()",
									"",
									"    var guid = format.replace(",
									"      /[xy]/g,",
									"      function (c) {",
									"        var r = (d + Math.random() * 16) % 16 | 0",
									"        d = Math.floor(d / 16)",
									"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
									"      })",
									"",
									"    return guid",
									"  }",
									"",
									"pm.environment.set(\"custom_attribute_displayname\", \"Voltage-\" + guid());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"{{custom_attribute_displayname}}\",\n    \"description\": \"Voltage of the electrical asset\",\n    \"enumValues\": [\n        \"110 V\",\n        \"220 V\"\n    ],\n    \"requiredOnIngress\": true,\n    \"defaultValue\": \"110 V\",\n    \"dataType\": \"select\"\n}"
						},
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/custom-attributes",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v1",
								"projects",
								":projectId",
								"custom-attributes"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{assets_project_id}}",
									"type": "text",
									"enabled": true,
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”"
								}
							]
						},
						"description": "Create a new Asset Custom Attribute.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-custom-attributes-POST/"
					},
					"response": []
				},
				{
					"name": "Step 5: Assign Custom Attributes to Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty and task is succeed\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
									"",
									"    var customAttribute = null;",
									"    var customAttributeId = pm.environment.get(\"custom_attribute_id\");",
									"    for ( var index in responseBody.results) {",
									"        if(responseBody.results[index].id == customAttributeId){",
									"            customAttribute = responseBody.results[index];",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(customAttribute).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{Bearer}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/categories/:categoryId/custom-attributes/:customAttributeId",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v1",
								"projects",
								":projectId",
								"categories",
								":categoryId",
								"custom-attributes",
								":customAttributeId"
							],
							"query": [
								{
									"key": "cursorState",
									"value": "",
									"description": "Opaque cursor token for pagination. Should be left blank for the initial call. Subsequent calls should use the cursorState found in the previous response. To reinitiate pagination, omit cursorState.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100",
									"description": "The maximum number of objects that can be returned. A query might return fewer than the value of limit due to filtering or other reasons.",
									"disabled": true
								},
								{
									"key": "includeInherited",
									"value": "true",
									"description": "if true, response will include inherited values within a tree structure",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{assets_project_id}}",
									"type": "text",
									"enabled": true,
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”"
								},
								{
									"key": "categoryId",
									"value": "{{asset_category_id}}",
									"type": "text",
									"enabled": true,
									"description": "Category ID"
								},
								{
									"key": "customAttributeId",
									"value": "{{custom_attribute_id}}",
									"type": "text",
									"enabled": true,
									"description": "Asset Custom Attribute ID"
								}
							]
						},
						"description": "Assign an Asset Custom Attribute to a Category.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-categories-category-id-custom-attributes-custom-attribute-id-PUT/"
					},
					"response": []
				}
			],
			"description": "This tutorial demonstrates how to setup a new BIM 360 project's Asset settings. This will include:\n\n- Creating new categories\n- Creating new status sets with Asset statuses\n- Creating new Asset custom attributes\n- Assigning status sets to the desired categories\n- Assigning Asset custom attributes to the desired categories\n- Adding relationships between categories and other entities (e.g. checklist templates)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create BIM 360 Assets Data",
			"item": [
				{
					"name": "Step 5: Assign Issues to Assets",
					"item": [
						{
							"name": "Step 5.1: Get the project and setup issues container id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
											"",
											"// setup the environment variable \"issues_container_id\"",
											"var responseBody = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"issues_container_id\", responseBody.data.relationships.issues.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}/project/v1/hubs/{{hub_id}}/projects/{{project_id}}",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs",
										"{{hub_id}}",
										"projects",
										"{{project_id}}"
									]
								},
								"description": "Returns a project for a given project_id.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-project_id-GET/"
							},
							"response": []
						},
						{
							"name": "Step 5.2: Fetch Issue Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"",
											"    for ( var index in responseBody.results) {",
											"        if(responseBody.results[index].title == \"Commissioning\"){",
											"            postman.setEnvironmentVariable(\"issue_type\", responseBody.results[index].id);",
											"            postman.setEnvironmentVariable(\"issue_subtype\", responseBody.results[index].subtypes[0].id);",
											"            break;",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_domain}}/issues/v1/containers/:container_id/ng-issue-types?include=subtypes",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"issues",
										"v1",
										"containers",
										":container_id",
										"ng-issue-types"
									],
									"query": [
										{
											"key": "include",
											"value": "subtypes",
											"description": "Include issue subtypes in the response. For example, work to complete and pre-punch list. Possible value: subtypes. For example, include=subtypes."
										}
									],
									"variable": [
										{
											"key": "container_id",
											"value": "{{issues_container_id}}",
											"description": "Each project is assigned a container that stores all the issues for the project. To find the ID, see the Retrieve a Container ID tutorial."
										}
									]
								},
								"description": "Retrieves a list of supported issue types (e.g., quality and safety) and issue subtypes (e.g., work to complete and pre-punch list) that you can allocate to an issue. <br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/ng-issue-types-GET/"
							},
							"response": []
						},
						{
							"name": "Step 5.3: Create a new Issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/vnd.api+json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.api+json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"data\")",
											"                                .that.have.property(\"id\");",
											"",
											"    pm.environment.set(\"issue_id\", responseBody.data.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(format = 'xxxxxxxxxx') {",
											"    var d = new Date().getTime()",
											"",
											"    var guid = format.replace(",
											"      /[xy]/g,",
											"      function (c) {",
											"        var r = (d + Math.random() * 16) % 16 | 0",
											"        d = Math.floor(d / 16)",
											"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
											"      })",
											"",
											"    return guid",
											"  }",
											"",
											"pm.environment.set(\"issue_title\", \"Assets API Tutorial Issue-\" + guid());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n      \"type\": \"quality_issues\",\n      \"attributes\": {\n        \"title\": \"{{issue_title}}\",\n        \"description\": \"Demo issue for Asset API tutorial\",\n        \"status\": \"open\",\n        \"ng_issue_subtype_id\": \"{{issue_subtype}}\",\n        \"ng_issue_type_id\": \"{{issue_type}}\",\n        \"starting_version\": \"1\"\n      }\n    }\n  }"
								},
								"url": {
									"raw": "{{base_domain}}/issues/v1/containers/:container_id/quality-issues",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"issues",
										"v1",
										"containers",
										":container_id",
										"quality-issues"
									],
									"variable": [
										{
											"key": "container_id",
											"value": "{{issues_container_id}}",
											"description": "Each project is assigned a container that stores all the issues for the project. To find the ID, see the Retrieve a Container ID tutorial."
										}
									]
								},
								"description": "Adds a BIM 360 issue to a project. You can create both document-related (pushpin) issues, and project-related issues.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/field-issues-POST/"
							},
							"response": []
						},
						{
							"name": "Step 5.4: Assign an issue with an asset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody && responseBody.length > 0).to.eql(true);",
											"    pm.expect(responseBody[0]).to.have.property(\"id\");",
											"",
											"    pm.environment.set(\"asset_issue_relationship_id\", responseBody[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"entities\": [\n        {\n            \"id\": \"{{issue_id}}\",\n            \"type\": \"issue\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/assets/:assetId/relationships",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"bim360",
										"assets",
										"v1",
										"projects",
										":projectId",
										"assets",
										":assetId",
										"relationships"
									],
									"variable": [
										{
											"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”",
											"enabled": true,
											"key": "projectId",
											"type": "text",
											"value": "{{assets_project_id}}"
										},
										{
											"key": "assetId",
											"value": "{{asset_id}}",
											"description": "The system generated Asset ID"
										}
									]
								},
								"description": "Add relationships between an Asset and target entities.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-asset-id-relationships-POST/"
							},
							"response": []
						}
					]
				},
				{
					"name": "Step 1: Fetch Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
									"",
									"    if(responseBody.results.length > 0) {",
									"        pm.environment.set(\"asset_category_id\", responseBody.results[responseBody.results.length - 1].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/categories",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v1",
								"projects",
								":projectId",
								"categories"
							],
							"query": [
								{
									"key": "cursorState",
									"value": "",
									"description": "Opaque cursor token for pagination. Should be left blank for the initial call. Subsequent calls should use the cursorState found in the previous response. To reinitiate pagination, omit cursorState.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100",
									"description": "The maximum number of objects that can be returned. A query might return fewer than the value of limit due to filtering or other reasons.",
									"disabled": true
								},
								{
									"key": "filter[isActive]",
									"value": "true",
									"description": "Filter to entities that are active or inactive",
									"disabled": true
								},
								{
									"key": "filter[parentId]",
									"value": "",
									"description": "Filter categories to direct children of the given parentId (a category ID)",
									"disabled": true
								},
								{
									"key": "filter[maxDepth]",
									"value": "",
									"description": "Filter categories to a maximum depth. Depth 0 means to only return the ROOT category.",
									"disabled": true
								},
								{
									"key": "filter[updatedAt]",
									"value": "2021-01-05T19:55:59.603Z",
									"description": "Retrieves items that were updated at the specified date and time, in the following format: YYYY-MM-DDThh:mm:ss.SSSZ, or a date and time range in the following format: YYYY-MM-DDThh:mm:ss.SSSZ..YYYY-MM-DDThh:mm:ss.SSSZ. Range queries can be closed or open in either direction (i.e. YYYY-MM-DDThh:mm:ss.SSSZ.. or ..YYYY-MM-DDThh:mm:ss.SSSZ).",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{assets_project_id}}",
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”"
								}
							]
						},
						"description": "Get all Categories paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-categories-GET/"
					},
					"response": []
				},
				{
					"name": "Step 2: Fetch Status Set to Category Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
									"",
									"    if(responseBody.results.length > 0) {",
									"        pm.environment.set(\"asset_status_step_set_id\", responseBody.results[0].statusStepSetId);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [\n        \"{{asset_category_id}}\"\n    ]\n}"
						},
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/category-status-step-sets/status-step-sets:batch-get?includeInherited=true",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v1",
								"projects",
								":projectId",
								"category-status-step-sets",
								"status-step-sets:batch-get"
							],
							"query": [
								{
									"key": "includeInherited",
									"value": "true",
									"description": "if true, response will include inherited values within a tree structure"
								}
							],
							"variable": [
								{
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”",
									"enabled": true,
									"key": "projectId",
									"type": "text",
									"value": "{{assets_project_id}}"
								}
							]
						},
						"description": "Batch fetch Status Sets.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-status-step-sets-batch-get-POST/"
					},
					"response": []
				},
				{
					"name": "Step 3: Fetch Asset Statuses from Status Sets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
									"",
									"    if(responseBody.results.length > 0) {",
									"        var statusSet = responseBody.results[0];",
									"        pm.expect(statusSet).to.not.be.null;",
									"",
									"        pm.environment.set(\"asset_status_id\", statusSet.values[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [\n        \"{{asset_status_step_set_id}}\"\n    ]\n}"
						},
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/status-step-sets:batch-get",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v1",
								"projects",
								":projectId",
								"status-step-sets:batch-get"
							],
							"query": [
								{
									"key": "includeDeleted",
									"value": "true",
									"description": "Indicates if soft-deleted objects should be included in the response. By default, soft-deleted objects are NOT returned.",
									"disabled": true
								}
							],
							"variable": [
								{
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”",
									"enabled": true,
									"key": "projectId",
									"type": "text",
									"value": "{{assets_project_id}}"
								}
							]
						},
						"description": "Batch fetch Status Sets.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-status-step-sets-batch-get-POST/"
					},
					"response": []
				},
				{
					"name": "Step 4: Create a new asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", () => {",
									"    var responseBody = pm.response.json();",
									"    //pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
									"    pm.expect(responseBody.results).to.be.an(\"array\");",
									"",
									"    if(responseBody.results.length > 0) {",
									"        pm.environment.set(\"asset_id\", responseBody.results[0].id);",
									"    } else {",
									"        pm.sendRequest({",
									"            url: pm.environment.get(\"base_domain\") + \"/bim360/assets/v2/projects/:projectId/assets?sort=createdAt DESC&includeCustomAttributes=true\".replace(\":projectId\", pm.environment.get(\"assets_project_id\")),",
									"            method: \"GET\",",
									"            header: {",
									"                \"Content-Type\": \"application/json\",",
									"                \"Authorization\": pm.request.headers.get(\"Authorization\")",
									"            }",
									"        }, function (err, res) {",
									"            pm.test(\"Workaround for getting the newly-created asset\", () => {",
									"                if (err) {",
									"                    console.error(err);",
									"                    pm.expect(err).to.be.null;",
									"                    return;",
									"                }",
									"",
									"                var responseBody = res.json();",
									"                if (responseBody.results && responseBody.results.length > 0) {",
									"                    pm.environment.set(\"asset_id\", responseBody.results[0].id);",
									"                } else {",
									"                    console.log(responseBody);",
									"                    throw new Error(JSON.stringify(responseBody));",
									"                }",
									"            });",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function guid(format = 'xxxxxxxxxx') {",
									"    var d = new Date().getTime()",
									"",
									"    var guid = format.replace(",
									"      /[xy]/g,",
									"      function (c) {",
									"        var r = (d + Math.random() * 16) % 16 | 0",
									"        d = Math.floor(d / 16)",
									"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
									"      })",
									"",
									"    return guid",
									"  }",
									"",
									"pm.environment.set(\"asset_name\", \"Assets API Tutorial-\" + guid());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"clientAssetId\": \"{{asset_name}}\",\n    \"categoryId\": \"{{asset_category_id}}\",\n    \"statusId\": \"{{asset_status_id}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v2/projects/:projectId/assets:batch-create",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v2",
								"projects",
								":projectId",
								"assets:batch-create"
							],
							"variable": [
								{
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”",
									"key": "projectId",
									"type": "string",
									"value": "{{assets_project_id}}"
								}
							]
						},
						"description": "Batch create Assets.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-batch-create-POST-v2/"
					},
					"response": []
				},
				{
					"name": "Step 6: Fetch Category to Asset Custom Attribute Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty and text-typed custom attribute is found\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
									"",
									"    var customAttribute = null;",
									"    for ( var index in responseBody.results) {",
									"        if(responseBody.results[index].dataType == \"text\"){",
									"            customAttribute = responseBody.results[index];",
									"            break;",
									"        }",
									"    }",
									"",
									"    pm.expect(customAttribute).to.not.be.null;",
									"",
									"    pm.environment.set(\"custom_attribute_id\", customAttribute.id);",
									"    pm.environment.set(\"custom_attribute_name\", customAttribute.name);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/categories/:categoryId/custom-attributes?includeInherited=true",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v1",
								"projects",
								":projectId",
								"categories",
								":categoryId",
								"custom-attributes"
							],
							"query": [
								{
									"key": "cursorState",
									"value": "",
									"description": "Opaque cursor token for pagination. Should be left blank for the initial call. Subsequent calls should use the cursorState found in the previous response. To reinitiate pagination, omit cursorState.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100",
									"description": "The maximum number of objects that can be returned. A query might return fewer than the value of limit due to filtering or other reasons.",
									"disabled": true
								},
								{
									"key": "includeInherited",
									"value": "true",
									"description": "if true, response will include inherited values within a tree structure"
								},
								{
									"key": "filter[updatedAt]",
									"value": "2020-05-01T06:00:00Z",
									"description": "Retrieves items that were updated at the specified date and time, in the following format: YYYY-MM-DDThh:mm:ss.SSSZ, or a date and time range in the following format: YYYY-MM-DDThh:mm:ss.SSSZ..YYYY-MM-DDThh:mm:ss.SSSZ. Range queries can be closed or open in either direction (i.e. YYYY-MM-DDThh:mm:ss.SSSZ.. or ..YYYY-MM-DDThh:mm:ss.SSSZ).",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{assets_project_id}}",
									"type": "text",
									"enabled": true,
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”"
								},
								{
									"key": "categoryId",
									"value": "{{asset_category_id}}",
									"type": "text",
									"enabled": true,
									"description": "Category ID"
								}
							]
						},
						"description": "Get the Asset Custom Attributes that are assigned to a Category. If the includeInherited query param is set to true, then return the Asset Custom Attributes that are available for the Category with inheritance.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-categories-category-id-custom-attributes-GET/"
					},
					"response": []
				},
				{
					"name": "Step 7: Update assets' custom attribute values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response body is not empty and update custom attribte value successfully\", () => {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(Object.keys(responseBody)).to.have.lengthOf(1);",
									"",
									"    var assetId = pm.environment.get(\"asset_id\");",
									"    var customAttributeName = pm.environment.get(\"custom_attribute_name\");",
									"",
									"    pm.expect(responseBody).to.have.property(assetId);",
									"    pm.expect(responseBody[assetId]).to.have.property(\"customAttributes\");",
									"    pm.expect(responseBody[assetId][\"customAttributes\"]).to.have.property(customAttributeName);",
									"    pm.expect(responseBody[assetId][\"customAttributes\"][customAttributeName]).to.eql(\"Hello World!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"{{asset_id}}\": {\n        \"customAttributes\": {\n            \"{{custom_attribute_name}}\": \"Hello World!\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v2/projects/:projectId/assets:batch-patch?includeCustomAttributes=true",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v2",
								"projects",
								":projectId",
								"assets:batch-patch"
							],
							"query": [
								{
									"key": "includeCustomAttributes",
									"value": "true",
									"description": "if true, the Assets in the response will include the “customAttributes” field"
								},
								{
									"key": "includeDeleted",
									"value": "true",
									"description": "The maximum number of objects that can be returned. A query might return fewer than the value of limit due to filtering or other reasons.",
									"disabled": true
								}
							],
							"variable": [
								{
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”",
									"key": "projectId",
									"type": "string",
									"value": "{{assets_project_id}}"
								}
							]
						},
						"description": "**Private Beta, you have to use it at your own risk** <br/>\nBatch patch Assets.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-batch-patch-PATCH-v2/"
					},
					"response": []
				}
			],
			"description": "This tutorial demonstrates how to create Asset data. This will include:\n\n- Obtain the last crated Asset category\n- Obtain the last crated Asset status\n- Creating a new Asset\n- Adding relationships between assets and other entities (e.g., issues)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Retrieve BIM 360 Assets Data",
			"item": [
				{
					"name": "Step 3: Fetch Status Sets And Asset Statuses",
					"item": [
						{
							"name": "Step 3.1: Fetch Asset Status Sets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/status-step-sets",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"bim360",
										"assets",
										"v1",
										"projects",
										":projectId",
										"status-step-sets"
									],
									"query": [
										{
											"key": "cursorState",
											"value": "",
											"description": "Opaque cursor token for pagination. Should be left blank for the initial call. Subsequent calls should use the cursorState found in the previous response. To reinitiate pagination, omit cursorState.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "100",
											"description": "The maximum number of objects that can be returned. A query might return fewer than the value of limit due to filtering or other reasons.",
											"disabled": true
										},
										{
											"key": "includeDeleted",
											"value": "true",
											"description": "Indicates if soft-deleted objects should be included in the response. By default, soft-deleted objects are NOT returned.",
											"disabled": true
										},
										{
											"key": "filter[updatedAt]",
											"value": "2020-05-01T06:00:00Z",
											"description": "Retrieves items that were updated at the specified date and time, in the following format: YYYY-MM-DDThh:mm:ss.SSSZ, or a date and time range in the following format: YYYY-MM-DDThh:mm:ss.SSSZ..YYYY-MM-DDThh:mm:ss.SSSZ. Range queries can be closed or open in either direction (i.e. YYYY-MM-DDThh:mm:ss.SSSZ.. or ..YYYY-MM-DDThh:mm:ss.SSSZ).",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{assets_project_id}}",
											"type": "string",
											"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”"
										}
									]
								},
								"description": "Get a Project’s Status Step Sets.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-status-step-sets-GET/"
							},
							"response": []
						},
						{
							"name": "Step 3.2: Fetch Asset Statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"asset_status_id\", responseBody.results[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/asset-statuses",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"bim360",
										"assets",
										"v1",
										"projects",
										":projectId",
										"asset-statuses"
									],
									"query": [
										{
											"key": "cursorState",
											"value": "",
											"description": "Opaque cursor token for pagination. Should be left blank for the initial call. Subsequent calls should use the cursorState found in the previous response. To reinitiate pagination, omit cursorState.",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "100",
											"description": "The maximum number of objects that can be returned. A query might return fewer than the value of limit due to filtering or other reasons.",
											"disabled": true
										},
										{
											"key": "includeDeleted",
											"value": "true",
											"description": "Indicates if soft-deleted objects should be included in the response. By default, soft-deleted objects are NOT returned.",
											"disabled": true
										},
										{
											"key": "filter[updatedAt]",
											"value": "2020-05-01T06:00:00Z",
											"description": "Retrieves items that were updated at the specified date and time, in the following format: YYYY-MM-DDThh:mm:ss.SSSZ, or a date and time range in the following format: YYYY-MM-DDThh:mm:ss.SSSZ..YYYY-MM-DDThh:mm:ss.SSSZ. Range queries can be closed or open in either direction (i.e. YYYY-MM-DDThh:mm:ss.SSSZ.. or ..YYYY-MM-DDThh:mm:ss.SSSZ).",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{assets_project_id}}",
											"type": "string",
											"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”"
										}
									]
								},
								"description": "Get all Assets Statuses paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-asset-statuses-GET/"
							},
							"response": []
						}
					]
				},
				{
					"name": "Step 1: Fetch Assets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v2/projects/:projectId/assets?includeCustomAttributes=true",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v2",
								"projects",
								":projectId",
								"assets"
							],
							"query": [
								{
									"key": "cursorState",
									"value": "eyJsaW1pdCI6MTAwLCJvZmZzZXQiOjEwMH0=",
									"description": "Opaque cursor token for pagination. Should be left blank for the initial call. Subsequent calls should use the cursorState found in the previous response. To reinitiate pagination, omit cursorState.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100",
									"description": "The maximum number of objects that can be returned. A query might return fewer than the value of limit due to filtering or other reasons.",
									"disabled": true
								},
								{
									"key": "filter[categoryId]",
									"value": "5",
									"description": "Filter to entities contained in the Category IDs provided",
									"disabled": true
								},
								{
									"key": "filter[statusLabel]",
									"value": "Ordered",
									"description": "Filter to entities with a status matching one of the provided Status labels",
									"disabled": true
								},
								{
									"key": "filter[statusId]",
									"value": "b1b8a04a-46c6-434c-b1c5-bd6f4081db2f",
									"description": "Filter to entities assigned to the Asset Status IDs provided by statusIds",
									"disabled": true
								},
								{
									"key": "filter[locationId]",
									"value": null,
									"description": "Filter to entities with a status matching one of the provided Status IDs",
									"disabled": true
								},
								{
									"key": "filter[customAttributes][ca1]",
									"value": null,
									"description": "Filter to entities that match the Custom Attribute values given. Each Custom Attribute filter should be keyed by the Custom Attribute’s name field",
									"disabled": true
								},
								{
									"key": "filter[searchText]",
									"value": "MVS-3D",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "createdAt DESC",
									"description": "Provide a valid API field name to sort by, with an optional direction (“asc” or “desc”). In the case of custom attributes, dot notation is used, e.g. “customAttributes.ca3 desc” Multiple comma-separated expressions may be provided for secondary sorts",
									"disabled": true
								},
								{
									"key": "includeCustomAttributes",
									"value": "true",
									"description": "if true, the Assets in the response will include the “customAttributes” field"
								},
								{
									"key": "includeDeleted",
									"value": "true",
									"description": "Indicates if soft-deleted objects should be included in the response. By default, soft-deleted objects are NOT returned.",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{assets_project_id}}",
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”"
								}
							]
						},
						"description": "Get all Assets paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-assets-GET/"
					},
					"response": []
				},
				{
					"name": "Step 2: Fetch Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/categories",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v1",
								"projects",
								":projectId",
								"categories"
							],
							"query": [
								{
									"key": "cursorState",
									"value": "",
									"description": "Opaque cursor token for pagination. Should be left blank for the initial call. Subsequent calls should use the cursorState found in the previous response. To reinitiate pagination, omit cursorState.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100",
									"description": "The maximum number of objects that can be returned. A query might return fewer than the value of limit due to filtering or other reasons.",
									"disabled": true
								},
								{
									"key": "filter[isActive]",
									"value": "true",
									"description": "Filter to entities that are active or inactive",
									"disabled": true
								},
								{
									"key": "filter[parentId]",
									"value": "",
									"description": "Filter categories to direct children of the given parentId (a category ID)",
									"disabled": true
								},
								{
									"key": "filter[maxDepth]",
									"value": "",
									"description": "Filter categories to a maximum depth. Depth 0 means to only return the ROOT category.",
									"disabled": true
								},
								{
									"key": "filter[updatedAt]",
									"value": "2021-01-05T19:55:59.603Z",
									"description": "Retrieves items that were updated at the specified date and time, in the following format: YYYY-MM-DDThh:mm:ss.SSSZ, or a date and time range in the following format: YYYY-MM-DDThh:mm:ss.SSSZ..YYYY-MM-DDThh:mm:ss.SSSZ. Range queries can be closed or open in either direction (i.e. YYYY-MM-DDThh:mm:ss.SSSZ.. or ..YYYY-MM-DDThh:mm:ss.SSSZ).",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{assets_project_id}}",
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”"
								}
							]
						},
						"description": "Get all Categories paginated.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-categories-GET/"
					},
					"response": []
				},
				{
					"name": "Step 4: Fetch Status Set to Category Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ids\": [\n        \"{{asset_category_id}}\"\n    ]\n}"
						},
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/category-status-step-sets/status-step-sets:batch-get?includeInherited=true",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v1",
								"projects",
								":projectId",
								"category-status-step-sets",
								"status-step-sets:batch-get"
							],
							"query": [
								{
									"key": "includeInherited",
									"value": "true",
									"description": "if true, response will include inherited values within a tree structure"
								}
							],
							"variable": [
								{
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”",
									"enabled": true,
									"key": "projectId",
									"type": "text",
									"value": "{{assets_project_id}}"
								}
							]
						},
						"description": "Batch fetch Status Sets.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-status-step-sets-batch-get-POST/"
					},
					"response": []
				},
				{
					"name": "Step 5: Fetch Asset Custom Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/custom-attributes",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v1",
								"projects",
								":projectId",
								"custom-attributes"
							],
							"query": [
								{
									"key": "cursorState",
									"value": "",
									"description": "Opaque cursor token for pagination. Should be left blank for the initial call. Subsequent calls should use the cursorState found in the previous response. To reinitiate pagination, omit cursorState.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100",
									"description": "The maximum number of objects that can be returned. A query might return fewer than the value of limit due to filtering or other reasons.",
									"disabled": true
								},
								{
									"key": "includeDeleted",
									"value": "true",
									"description": "Indicates if soft-deleted objects should be included in the response. By default, soft-deleted objects are NOT returned.",
									"disabled": true
								},
								{
									"key": "filter[updatedAt]",
									"value": "2020-05-01T06:00:00Z",
									"description": "Retrieves items that were updated at the specified date and time, in the following format: YYYY-MM-DDThh:mm:ss.SSSZ, or a date and time range in the following format: YYYY-MM-DDThh:mm:ss.SSSZ..YYYY-MM-DDThh:mm:ss.SSSZ. Range queries can be closed or open in either direction (i.e. YYYY-MM-DDThh:mm:ss.SSSZ.. or ..YYYY-MM-DDThh:mm:ss.SSSZ).",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{assets_project_id}}",
									"type": "string",
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”"
								}
							]
						},
						"description": "Get the pool of all Custom Attributes with pagination.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-custom-attributes-GET/"
					},
					"response": []
				},
				{
					"name": "Step 6: Fetch Category to Asset Custom Attribute Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_domain}}/bim360/assets/v1/projects/:projectId/categories/:categoryId/custom-attributes?includeInherited=true",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"assets",
								"v1",
								"projects",
								":projectId",
								"categories",
								":categoryId",
								"custom-attributes"
							],
							"query": [
								{
									"key": "cursorState",
									"value": "",
									"description": "Opaque cursor token for pagination. Should be left blank for the initial call. Subsequent calls should use the cursorState found in the previous response. To reinitiate pagination, omit cursorState.",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "100",
									"description": "The maximum number of objects that can be returned. A query might return fewer than the value of limit due to filtering or other reasons.",
									"disabled": true
								},
								{
									"key": "includeInherited",
									"value": "true",
									"description": "if true, response will include inherited values within a tree structure"
								},
								{
									"key": "filter[updatedAt]",
									"value": "2020-05-01T06:00:00Z",
									"description": "Retrieves items that were updated at the specified date and time, in the following format: YYYY-MM-DDThh:mm:ss.SSSZ, or a date and time range in the following format: YYYY-MM-DDThh:mm:ss.SSSZ..YYYY-MM-DDThh:mm:ss.SSSZ. Range queries can be closed or open in either direction (i.e. YYYY-MM-DDThh:mm:ss.SSSZ.. or ..YYYY-MM-DDThh:mm:ss.SSSZ).",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "projectId",
									"value": "{{assets_project_id}}",
									"type": "text",
									"enabled": true,
									"description": "BIM 360 project ID. Must be a UUID or a Project ID of the form “b.{UUID}”"
								},
								{
									"key": "categoryId",
									"value": "{{asset_category_id}}",
									"type": "text",
									"enabled": true,
									"description": "Category ID"
								}
							]
						},
						"description": "Get the Asset Custom Attributes that are assigned to a Category. If the includeInherited query param is set to true, then return the Asset Custom Attributes that are available for the Category with inheritance.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/assets-categories-category-id-custom-attributes-GET/"
					},
					"response": []
				},
				{
					"name": "Step 8: Fetch Asset Relationships",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header present and is application/json\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_domain}}/bim360/relationship/v2/containers/:containerId/relationships:search?domain=autodesk-bim360-asset&type=asset",
							"host": [
								"{{base_domain}}"
							],
							"path": [
								"bim360",
								"relationship",
								"v2",
								"containers",
								":containerId",
								"relationships:search"
							],
							"query": [
								{
									"key": "domain",
									"value": "autodesk-bim360-asset",
									"description": "The relationship domain to search."
								},
								{
									"key": "type",
									"value": "asset",
									"description": "The entity type to search."
								},
								{
									"key": "id",
									"value": "1",
									"description": "The entity ID to search.",
									"disabled": true
								},
								{
									"key": "createdAfter",
									"value": null,
									"description": "Filters the returned relationships to those created after the given time.",
									"disabled": true
								},
								{
									"key": "createdBefore",
									"value": null,
									"description": "Filters the returned relationships to those created before the given time.",
									"disabled": true
								},
								{
									"key": "withDomain",
									"value": null,
									"description": "The WITH relationship domain to search.",
									"disabled": true
								},
								{
									"key": "withType",
									"value": null,
									"description": "The WITH entity type to search.",
									"disabled": true
								},
								{
									"key": "withId",
									"value": null,
									"description": "The WITH entity ID to search.",
									"disabled": true
								},
								{
									"key": "includeDeleted",
									"value": null,
									"description": "Whether or not to include deleted relationships in the search.",
									"disabled": true
								},
								{
									"key": "pageLimit",
									"value": null,
									"description": "The maximum number of relationships to return in a page. If not set, the default page limit is used, as determined by the server.",
									"disabled": true
								},
								{
									"key": "continuationToken",
									"value": null,
									"description": "The token indicating the start of the page. If not set, the first page is retrieved.",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "containerId",
									"value": "{{assets_project_id}}",
									"description": "The GUID that uniquely identifies the container."
								}
							]
						},
						"description": "Retrieves a list of relationships that match the provided search parameters.<br/>\nhttps://forge.autodesk.com/en/docs/bim360/v1/reference/http/relationship-service-v2-search-relationships-GET/"
					},
					"response": []
				}
			],
			"description": "This tutorial demonstrates how to fetch your complete set of BIM 360 Asset data and metadata. This can be for the entirety of your Asset data, or filtered to a subset of Asset data.\n\nThis set will include the assets themselves, as well as all of the surrounding Asset project data:\n\n- Categories\n- Status sets / Asset statuses\n- Asset custom attributes\n- Assignments of status sets and Asset custom attributes to categories",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "data:write data:create data:read",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://www.postman.com/oauth2/callback",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{base_domain}}/authentication/v1/gettoken",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{base_domain}}/authentication/v1/authorize",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "body",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "3LO Access Token",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{client_secret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{client_id}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}